name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: 设置 Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 设置 Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 安装依赖
      run: yarn install --frozen-lockfile
      
    - name: 生成数据库
      run: npx drizzle-kit generate
      
    - name: 安装 Expo CLI
      run: npm install -g @expo/cli
      
    - name: 预构建 Android
      run: npx expo prebuild -p android --clear
      
    - name: 创建 local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > android/local.properties
        
    - name: 构建 APK (Debug)
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: 上传 APK 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-debug
        path: android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30

  # 可选：构建 Release APK (需要签名配置)
  build-android-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # 仅在 main 分支触发
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: 设置 Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 设置 Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 安装依赖
      run: yarn install --frozen-lockfile
      
    - name: 生成数据库
      run: npx drizzle-kit generate
      
    - name: 安装 Expo CLI
      run: npm install -g @expo/cli
      
    - name: 预构建 Android
      run: npx expo prebuild -p android --clear
      
    - name: 创建 local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > android/local.properties
        
    # 配置签名 (需要在 GitHub Secrets 中添加相关密钥)
    - name: 配置签名
      if: ${{ env.KEYSTORE_BASE64 != '' }}
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo $KEYSTORE_BASE64 | base64 --decode > android/app/my-release-key.keystore
        echo "MYAPP_RELEASE_STORE_FILE=my-release-key.keystore" >> android/gradle.properties
        echo "MYAPP_RELEASE_KEY_ALIAS=$KEY_ALIAS" >> android/gradle.properties
        echo "MYAPP_RELEASE_STORE_PASSWORD=$KEYSTORE_PASSWORD" >> android/gradle.properties
        echo "MYAPP_RELEASE_KEY_PASSWORD=$KEY_PASSWORD" >> android/gradle.properties
        
    - name: 构建 Release APK
      run: |
        cd android
        if [ -f "app/my-release-key.keystore" ]; then
          ./gradlew assembleRelease
        else
          echo "未找到签名文件，构建 Debug APK"
          ./gradlew assembleDebug
        fi
        
    - name: 上传 Release APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-release
        path: |
          android/app/build/outputs/apk/release/app-release.apk
          android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 90
